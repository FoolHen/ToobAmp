/*
Copyright (c) 2023 Robin E. R. Davies

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include "lvtk_ui/Lv2UI.hpp"
#include "lvtk/LvtkDrawingContext.hpp"
#include "ToobUi.hpp"

#include <lv2/atom/atom.h>
#include <lv2/atom/util.h>
#include "lvtk_ui/Lv2PortViewFactory.hpp"

#ifndef TOOB_URI
#define TOOB_URI "http://two-play.com/plugins/toob"
#endif

using namespace lvtk::ui;
using namespace lvtk;
using namespace toob;

// The plugin info generated by generate_lvtk_plugin_info.
#include "SpectrumAnalyzerInfo.hpp"

#define PLUGIN_CLASS SpectrumAnalyzerUi
#define PLUGIN_UI_URI "http://two-play.com/plugins/toob-spectrum-ui"
#define PLUGIN_INFO_CLASS SpectrumAnalyzerInfo


class SpectrumPlotElement: public LvtkElement {
public:
    using self= SpectrumPlotElement;
    using super = LvtkElement;
    using ptr = std::shared_ptr<self>;
    static ptr Create() { return std::make_shared<self>(); }

    void MinF(double minF);
    void MaxF(double maxF);
    void Level(double level);
    void SetResponse(const std::string &svgResponse, const std::string&svgHoldResponse);

protected:
    struct PointF {
        float x,y;
    };
    using PlotValues = std::vector<PointF>;

    virtual void OnDraw(LvtkDrawingContext &dc) override;

    virtual void OnMount() override {
        this->ClearClasses();
        super::OnMount();
        this->AddClass(Theme().plotStyle);
        PreComputeGridXs();
        this->Style().Width(width);


    }
private:
    LvtkColor holdColor { "#80800060"};
    LvtkColor plotColor { "#008000E0"};

    double width = 200.0;
    double xLeft = 60.0;
    double xRight = 22000;
    double yBottom = 0;
    double yTop = -80;

    void PreComputeGridXs();
    void DrawGrid(LvtkDrawingContext &dc);
    void DrawPlot(LvtkDrawingContext&dc,PlotValues&values);
    void ConvertSvg(PlotValues&values, const std::string&svg);
    

    std::vector<double> majorGridXs, minorGridXs;

    PlotValues values;
    PlotValues holdValues;
};


// class declaration.
class PLUGIN_CLASS : public ToobUi
{
public:
    using super = ToobUi;
    using self = PLUGIN_CLASS;
    PLUGIN_CLASS();

protected:
    virtual LvtkContainerElement::ptr RenderControls() override;
    virtual bool instantiate(
        const char *plugin_ui_uri,
        const char *plugin_uri,
        const char *bundle_path,
        LV2UI_Write_Function write_function,
        LV2UI_Controller controller,
        LV2UI_Widget *widget,
        const LV2_Feature *const *features) override;

    virtual void ui_delete() override;

    virtual void OnPatchPropertyReceived(LV2_URID type, const uint8_t*data) override;
private:
    observer_handle_t minFObserverHandle, maxFObserverHandle,levelObserverHandle;

    SpectrumPlotElement::ptr spectrumPlotElement;

    struct Urids {
        LV2_URID patchProperty__spectrumResponse;
        LV2_URID patchProperty__spectrumEnable;
        LV2_URID atom__Tuple;
        LV2_URID atom__String;
    };

    Urids urids;

    void WriteSpectrumEnable(bool enable);
};

PLUGIN_CLASS::PLUGIN_CLASS()
    : super(
          PLUGIN_INFO_CLASS::Create(),
          LvtkSize(596, 208), // default window size.
          LvtkSize(470, 800),
          "SpectrumAnalyzerLogo.svg")
{
    minFObserverHandle = GetControlProperty("minF").addObserver(
        [this](double value) {
            if (this->spectrumPlotElement)
            {
                spectrumPlotElement->MinF(value);
            }

        });
    levelObserverHandle = GetControlProperty("level").addObserver(
        [this](double value) {
            if (this->spectrumPlotElement)
            {
                spectrumPlotElement->Level(value);
            }

        });

    maxFObserverHandle = GetControlProperty("maxF").addObserver(
        [this](double value) {
            if (this->spectrumPlotElement)
            {
                spectrumPlotElement->MaxF(value);
            }
        });
}

bool PLUGIN_CLASS::instantiate(
    const char *plugin_ui_uri,
    const char *plugin_uri,
    const char *bundle_path,
    LV2UI_Write_Function write_function,
    LV2UI_Controller controller,
    LV2UI_Widget *widget,
    const LV2_Feature *const *features)
{
    if (!super::instantiate(
            plugin_ui_uri,
            plugin_uri,
            bundle_path,
            write_function,
            controller,
            widget,
            features))
    {
        return false;
    }

    urids.patchProperty__spectrumResponse = GetUrid(TOOB_URI  "#spectrumResponse");
    urids.patchProperty__spectrumEnable = GetUrid(TOOB_URI  "#spectrumEnable");
    urids.atom__Tuple = GetUrid(LV2_ATOM__Tuple);
    urids.atom__String = GetUrid(LV2_ATOM__String);

    WriteSpectrumEnable(true);
    spectrumPlotElement->Level(GetControlProperty("level").get());

    return true;
}

void PLUGIN_CLASS::ui_delete()
{
    WriteSpectrumEnable(false);
    super::ui_delete();
}
void PLUGIN_CLASS::WriteSpectrumEnable(bool enable)
{
    WritePatchProperty(urids.patchProperty__spectrumEnable,enable);
}

static inline std::string AtomToString(const LV2_Atom*atom)
{
    const char*cstr = ((const char*)atom) + sizeof(LV2_Atom);
    return cstr;
}
void PLUGIN_CLASS::OnPatchPropertyReceived(LV2_URID type, const uint8_t*data)
{
    const LV2_Atom*atom = (const LV2_Atom*)data;

    if (type == urids.patchProperty__spectrumResponse && atom->type == urids.atom__Tuple)
    {
        const LV2_Atom_Tuple*atomTuple = (const LV2_Atom_Tuple*)atom;
        LV2_Atom *tuple0 = lv2_atom_tuple_begin(atomTuple);
        LV2_Atom *tuple1 = lv2_atom_tuple_next(tuple0);
        if (tuple0->type != urids.atom__String || tuple1->type != urids.atom__String)
        {
            return;
        }
        std::string svgResponse = AtomToString(tuple0);
        std::string svgHoldResponse = AtomToString(tuple1);
        if (spectrumPlotElement)
        {
            spectrumPlotElement->SetResponse(svgResponse, svgHoldResponse);
        }

    }
}

LvtkContainerElement::ptr PLUGIN_CLASS::RenderControls() {
    auto result = super::RenderControls();
    this->spectrumPlotElement = SpectrumPlotElement::Create();

    auto size = this->PortViewFactory().DefaultSize();

    this->spectrumPlotElement->Style()
        .Height(size.Height()-16)
        .Width(263)
        ;
    result->AddChild(spectrumPlotElement,0);
    return result;

}

void SpectrumPlotElement::ConvertSvg(PlotValues&result, const std::string&svg)
{
     std::stringstream s(svg);
    result.resize(0);
     while (!s.eof())
     {
        char cmd, comma;
        float x,y;
        s >> cmd;
        if (!s) break;
        s >> x >> comma >> y ;
        result.push_back(PointF{x,y});
     }
}

void SpectrumPlotElement::SetResponse(const std::string &svgResponse, const std::string&svgHoldResponse)
{
    ConvertSvg(this->values,svgResponse);
    ConvertSvg(this->holdValues,svgHoldResponse);
    Invalidate();
}

void SpectrumPlotElement::PreComputeGridXs()
{
    if (!IsMounted()) return;

    majorGridXs.resize(0);
    minorGridXs.resize(0);

    if (xLeft >= xRight || xLeft <= 0) return;

    
    double m = width / (std::log(xRight) - std::log(xLeft));

    double gridX0 = std::pow(10, std::floor(std::log10(xLeft)));
    for (double f = gridX0; f < xRight; f *= 10)
    {
        for (size_t i = 1; i <= 9; ++i)
        {
            double decade = f * i;
            if (decade >= xLeft && decade < xRight)
            {
                double x = m * (std::log(decade) - std::log(xLeft));
                if (x > 0 && x < width)
                {
                    if (i == 1)
                    {
                        majorGridXs.push_back(x);
                    }
                    else
                    {
                        minorGridXs.push_back(x);
                    }
                }
            }
        };
    }
}

void SpectrumPlotElement::Level(double value)
{
    this->yBottom = -80+value;
    this->yTop = value;
}
void SpectrumPlotElement::MinF(double minF)
{
    if (minF != this->xLeft)
    {
        xLeft = minF;
        PreComputeGridXs();
    }
}
void SpectrumPlotElement::MaxF(double maxF)
{
    if (maxF != this->xRight)
    {
        xRight = maxF;
        PreComputeGridXs();
    }
}

void SpectrumPlotElement::OnDraw(LvtkDrawingContext &dc)
{

    super::OnDraw(dc);
    auto clientSize = ClientSize();
    LvtkRectangle clientRect{clientSize};

    dc.save();
    {
        LvtkRoundCorners corners = Style().RoundCorners().PixelValue();
        dc.round_corner_rectangle(clientRect, corners);
        dc.clip();

        size_t count = this->values.size();
        if (count > 1)
        {
            DrawPlot(dc,holdValues);
            dc.set_source(holdColor);
            dc.fill();

            DrawPlot(dc,values);
            dc.set_source(plotColor);
            dc.fill();
        }
        DrawGrid(dc);
    }
    dc.restore();
}

void SpectrumPlotElement::DrawGrid(LvtkDrawingContext &dc)
{
    LvtkSize clientSize = this->ClientSize();
    constexpr double minorTickWidth = 0.20;
    constexpr double majorTickWidth = 0.35;
    dc.set_source(Theme().plotTickColor);
    dc.set_line_width(minorTickWidth);
    dc.set_line_cap(cairo_line_cap_t::CAIRO_LINE_CAP_BUTT);
    for (double x : minorGridXs)
    {
        dc.move_to(x, 0);
        dc.line_to(x, clientSize.Height());
        dc.stroke();
    }
    dc.set_line_width(majorTickWidth);
    double gxScale = clientSize.Width()/width;
    for (double gx : majorGridXs)
    {
        double x = gx*gxScale;
        dc.move_to(x, 0);
        dc.line_to(x, clientSize.Height());
        dc.stroke();
    }

    {
        // solve for m, c:
        // f(x) = m*x+c;
        // f(yBottom) = height()
        // f(yTop) = 0
        //  m*yTop + c =0
        //  m*yBottom+c = height()
        // m*(yBottom-yTop) = height()

        dc.set_line_width(0.35);

        double m = clientSize.Height() / (yBottom - yTop);
        double c = -m * yTop;
        for (
            double db = std::floor(yBottom / 10) * 10 + 10;
            db < yTop;
            db += 10)
        {
            double y = m * db + c;
            dc.set_line_width(db == 0 ? majorTickWidth : minorTickWidth);
            dc.move_to(0, y);
            dc.line_to(width, y);
            dc.stroke();
        }
    }
}

void SpectrumPlotElement::DrawPlot(LvtkDrawingContext&dc,PlotValues&values)
{
    LvtkSize size = clientSize;
    // points are in range [0..1000].
    double scaleX = size.Width()/200;
    double scaleY = size.Height()*0.001;
    if (values.size() > 2)
    {
        dc.move_to(scaleX*values[0].x,scaleY*values[0].y);
        for (auto i = values.begin()+1; i != values.end(); ++i)
        {
            dc.line_to(scaleX*i->x,scaleY*i->y);
        }
        dc.close_path();
    } else {
        dc.rectangle(0,0,0,0);
    }
}

// Make the plugin visible to LV2 hosts.

Lv2UIRegistration<PLUGIN_CLASS>
    spectrumAnalyzerRegistration{PLUGIN_UI_URI};


